/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.umn.cs.distributedkeyvaluestore;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-30")
public class FileServerResponse implements org.apache.thrift.TBase<FileServerResponse, FileServerResponse._Fields>, java.io.Serializable, Cloneable, Comparable<FileServerResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileServerResponse");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FILE_SERVER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("fileServerInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FileServerResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FileServerResponseTupleSchemeFactory());
  }

  /**
   * 
   * @see edu.umn.cs.distributedkeyvaluestore.Status
   */
  public edu.umn.cs.distributedkeyvaluestore.Status status; // required
  public edu.umn.cs.distributedkeyvaluestore.FileServerInfo fileServerInfo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see edu.umn.cs.distributedkeyvaluestore.Status
     */
    STATUS((short)1, "status"),
    FILE_SERVER_INFO((short)2, "fileServerInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // FILE_SERVER_INFO
          return FILE_SERVER_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.FILE_SERVER_INFO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, edu.umn.cs.distributedkeyvaluestore.Status.class)));
    tmpMap.put(_Fields.FILE_SERVER_INFO, new org.apache.thrift.meta_data.FieldMetaData("fileServerInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.umn.cs.distributedkeyvaluestore.FileServerInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileServerResponse.class, metaDataMap);
  }

  public FileServerResponse() {
  }

  public FileServerResponse(
    edu.umn.cs.distributedkeyvaluestore.Status status)
  {
    this();
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FileServerResponse(FileServerResponse other) {
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetFileServerInfo()) {
      this.fileServerInfo = new edu.umn.cs.distributedkeyvaluestore.FileServerInfo(other.fileServerInfo);
    }
  }

  public FileServerResponse deepCopy() {
    return new FileServerResponse(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.fileServerInfo = null;
  }

  /**
   * 
   * @see edu.umn.cs.distributedkeyvaluestore.Status
   */
  public edu.umn.cs.distributedkeyvaluestore.Status getStatus() {
    return this.status;
  }

  /**
   * 
   * @see edu.umn.cs.distributedkeyvaluestore.Status
   */
  public FileServerResponse setStatus(edu.umn.cs.distributedkeyvaluestore.Status status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public edu.umn.cs.distributedkeyvaluestore.FileServerInfo getFileServerInfo() {
    return this.fileServerInfo;
  }

  public FileServerResponse setFileServerInfo(edu.umn.cs.distributedkeyvaluestore.FileServerInfo fileServerInfo) {
    this.fileServerInfo = fileServerInfo;
    return this;
  }

  public void unsetFileServerInfo() {
    this.fileServerInfo = null;
  }

  /** Returns true if field fileServerInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetFileServerInfo() {
    return this.fileServerInfo != null;
  }

  public void setFileServerInfoIsSet(boolean value) {
    if (!value) {
      this.fileServerInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((edu.umn.cs.distributedkeyvaluestore.Status)value);
      }
      break;

    case FILE_SERVER_INFO:
      if (value == null) {
        unsetFileServerInfo();
      } else {
        setFileServerInfo((edu.umn.cs.distributedkeyvaluestore.FileServerInfo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case FILE_SERVER_INFO:
      return getFileServerInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case FILE_SERVER_INFO:
      return isSetFileServerInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FileServerResponse)
      return this.equals((FileServerResponse)that);
    return false;
  }

  public boolean equals(FileServerResponse that) {
    if (that == null)
      return false;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_fileServerInfo = true && this.isSetFileServerInfo();
    boolean that_present_fileServerInfo = true && that.isSetFileServerInfo();
    if (this_present_fileServerInfo || that_present_fileServerInfo) {
      if (!(this_present_fileServerInfo && that_present_fileServerInfo))
        return false;
      if (!this.fileServerInfo.equals(that.fileServerInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_fileServerInfo = true && (isSetFileServerInfo());
    list.add(present_fileServerInfo);
    if (present_fileServerInfo)
      list.add(fileServerInfo);

    return list.hashCode();
  }

  @Override
  public int compareTo(FileServerResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileServerInfo()).compareTo(other.isSetFileServerInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileServerInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileServerInfo, other.fileServerInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FileServerResponse(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (isSetFileServerInfo()) {
      if (!first) sb.append(", ");
      sb.append("fileServerInfo:");
      if (this.fileServerInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.fileServerInfo);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (fileServerInfo != null) {
      fileServerInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FileServerResponseStandardSchemeFactory implements SchemeFactory {
    public FileServerResponseStandardScheme getScheme() {
      return new FileServerResponseStandardScheme();
    }
  }

  private static class FileServerResponseStandardScheme extends StandardScheme<FileServerResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FileServerResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = edu.umn.cs.distributedkeyvaluestore.Status.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILE_SERVER_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fileServerInfo = new edu.umn.cs.distributedkeyvaluestore.FileServerInfo();
              struct.fileServerInfo.read(iprot);
              struct.setFileServerInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FileServerResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.fileServerInfo != null) {
        if (struct.isSetFileServerInfo()) {
          oprot.writeFieldBegin(FILE_SERVER_INFO_FIELD_DESC);
          struct.fileServerInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FileServerResponseTupleSchemeFactory implements SchemeFactory {
    public FileServerResponseTupleScheme getScheme() {
      return new FileServerResponseTupleScheme();
    }
  }

  private static class FileServerResponseTupleScheme extends TupleScheme<FileServerResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FileServerResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.status.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetFileServerInfo()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetFileServerInfo()) {
        struct.fileServerInfo.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FileServerResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.status = edu.umn.cs.distributedkeyvaluestore.Status.findByValue(iprot.readI32());
      struct.setStatusIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.fileServerInfo = new edu.umn.cs.distributedkeyvaluestore.FileServerInfo();
        struct.fileServerInfo.read(iprot);
        struct.setFileServerInfoIsSet(true);
      }
    }
  }

}

